steps:
  # Provision clusters if need to
  - name: 'gcr.io/cloud-builders/gcloud'
    id: check-infra
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      cd hack && ./setup-gdt.sh

  # Build image 
  - name: 'gcr.io/cloud-builders/docker'
    id: build-image
    args: 
    - 'build' 
    - '-t'
    - 'us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}'
    - '.'

  # Push image
  - name: 'gcr.io/cloud-builders/docker'
    id: push-image
    waitFor:
    - build-image
    args: 
    - 'push'
    - 'us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}'



  # Deploy master into master cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    id: deploy-master
    waitFor:
    - check-infra
    - push-image
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      cd hack && ./deploy.sh

  # Waiting & retrieve external IP
  - name: 'gcr.io/cloud-builders/gcloud'
    id: retrieve-endpoint
    waitFor:
    - deploy-master
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      cd hack && ./endpoint.sh


  # Deploy workers into worker cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    id: deploy-worker
    waitFor:
    - retrieve-endpoint
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      cd hack && ./deploy-worker.sh

timeout: 3600s
substitutions:
    _MASTER_PIPELINE: gdt-app-master
    _WORKER_PIPELINE: gdt-app-worker
options:
  dynamicSubstitutions: true
  substitution_option: 'ALLOW_LOOSE'
