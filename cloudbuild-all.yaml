steps:
  # Provision clusters if need to
  - name: 'gcr.io/cloud-builders/gcloud'
    id: check-infra
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      cd hack && ./setup-gdt.sh

  # Build image 
  - name: 'gcr.io/cloud-builders/docker'
    id: build-image
    args: 
    - 'build' 
    - '-t'
    - 'us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}'
    - '.'

  # Push image
  - name: 'gcr.io/cloud-builders/docker'
    id: push-image
    waitFor:
    - build-image
    args: 
    - 'push'
    - 'us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}'



  # Deploy master into master cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    id: deploy-master
    waitFor:
    - check-infra
    - push-image
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      regions=`cat ./hack/gke-config`
      region=`echo ${regions}|awk '{print $1}'`
      master_cluster="testx-${region}"

      echo ""
      echo "Deploy manifests to master clutser => ${master_cluster}"
      export KUBECONFIG=/workspace/config
      kubectl config use-context ${master_cluster}
      kubectl create ns locust || true

      cd manifests/master
      echo "image=locust-tasks=us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}"
      kustomize edit set image locust-tasks=us-docker.pkg.dev/${PROJECT_ID}/gdt-repo/locust-tasks:${COMMIT_SHA}
      kustomize build | kubectl apply -f -

      echo ""
      kustomize version || true
      which kustomize
      ls -l /builder/google-cloud-sdk/bin


  # Waiting & retrieve external IP
  - name: 'gcr.io/cloud-builders/gcloud'
    id: retrieve-endpoint
    waitFor:
    - deploy-master
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      regions=`cat ./hack/gke-config`
      region=`echo ${regions}|awk '{print $1}'`
      master_cluster="testx-${region}"
      cat ./manifests/master/kustomization.yaml

      echo ""
      export KUBECONFIG=/workspace/config
      kubectl config use-context ${master_cluster}
      external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc locust-master -n locust --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" || true); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip
      echo ${endpoint}

      echo ""
      sed -i 's/MASTER_HOST/'${endpoint}'/g' ./manifests/worker/kustomization.yaml
      cat ./manifests/worker/kustomization.yaml
      cp ./manifests/worker/kustomization.yaml /workspace
      echo "Access => http://${endpoint}/"



  # Deploy workers into worker cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    id: deploy-worker
    waitFor:
    - retrieve-endpoint
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      echo "Outside => ${PROJECT_ID}"
      env
      echo ""
      
      cd hack && ./deploy-worker.sh ${COMMIT_SHA}

timeout: 3600s
substitutions:
    _MASTER_PIPELINE: gdt-app-master
    _WORKER_PIPELINE: gdt-app-worker
options:
  dynamicSubstitutions: true
  substitution_option: 'ALLOW_LOOSE'
